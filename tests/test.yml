---

- name: setup for tests
  hosts: containers
  tags: [always]
  tasks:
    - name: remove virtualenv paths
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /root/test_env
        - /home/normal/test_env
        - /home/admin/test_env2a
        - /home/normal/test_env2b
        - /home/normal/test_env3
        - /root/test_env4
    - name: create additional users to test become capabilities
      user:
        name: "{{ item.name }}"
        createhome: true
        home: "/home/{{ item.name }}"
        password: "$6$8yuM3YVsSYTjtPr$b742a/sSdpKpyuC9J7L2fHRrV1pUtHeJuUj6KrjQ7UsHRrT8ffvqnoUutJLVqIArHnm3/0GtF5DH5hnLn8rJo1"  # testpass
        groups: "{{ item.groups | default(omit) }}"
      with_items:
        - name: admin
          groups: "{{ (ansible_os_family == 'Debian') | ternary('sudo', 'wheel') }}"
        - name: normal

- name: test running as root user
  hosts: containers
  gather_facts: false
  tags: [root]
  vars:
    virtualenv_path: "~/test_env"
  tasks:
    - name: create test requirements file
      copy:
        content: |
          decorator
          requests
        dest: "~/venv_requirements.txt"
    - name: test initial virtualenv creation
      include_role:
        name: cchurch.virtualenv
      vars:
        virtualenv_notify_on_updated: "virtualenv handler created"
    - name: test virtualenv with no changes
      include_role:
        name: cchurch.virtualenv
      vars:
        virtualenv_notify_on_updated: "virtualenv handler no change"
    - name: test virtualenv recreation
      include_role:
        name: cchurch.virtualenv
      vars:
        virtualenv_notify_on_updated: "virtualenv handler recreated"
        virtualenv_recreate: true
    - name: test installing virtualenv pre packages
      include_role:
        name: cchurch.virtualenv
      vars:
        virtualenv_pre_packages:
          - pytz
        virtualenv_notify_on_updated: "virtualenv handler pre packages"
    - name: test downgrading virtualenv pre packages
      include_role:
        name: cchurch.virtualenv
      vars:
        virtualenv_pre_packages:
          - name: pytz
            version: "2014.4"
        virtualenv_notify_on_updated: "virtualenv handler pre packages downgrade"
    - name: test installing from a requirements file
      include_role:
        name: cchurch.virtualenv
      vars:
        virtualenv_requirements:
          - "~/venv_requirements.txt"
        virtualenv_notify_on_updated: "virtualenv handler requirements"
    - name: test uninstalling via virtualenv post packages
      include_role:
        name: cchurch.virtualenv
      vars:
        virtualenv_post_packages:
          - name: pytz
            state: absent
        virtualenv_notify_on_updated: "virtualenv handler post packages"
    - name: test creating virtualenv as another user with become
      include_role:
        name: cchurch.virtualenv
      vars:
        virtualenv_user: normal
        virtualenv_path: /home/normal/test_env
        virtualenv_notify_on_updated: "virtualenv handler created with become"
    - name: test updating virtualenv with no changes with become
      include_role:
        name: cchurch.virtualenv
      vars:
        virtualenv_user: normal
        virtualenv_path: /home/normal/test_env
        virtualenv_notify_on_updated: "virtualenv handler no change with become"
    - name: flush all notified handlers
      meta: flush_handlers
    - name: assert that appropriate handlers were notified
      assert:
        that:
          - virtualenv_notified_created
          - virtualenv_foo_notified
          - virtualenv_bar_notified
          - virtualenv_notified_no_change is not defined
          - virtualenv_notified_recreated
          - virtualenv_notified_pre_packages
          - virtualenv_notified_pre_packages_downgrade
          - virtualenv_notified_requirements
          - virtualenv_notified_post_packages
          - virtualenv_notified_created_with_become
          - virtualenv_notified_no_change_with_become is not defined
    - name: check that root virtualenv was created and files owned by current user
      stat:
        path: "~/test_env/bin/python"
      register: virtualenv_root_stat_result
      failed_when: "not virtualenv_root_stat_result.stat.exists or virtualenv_root_stat_result.stat.pw_name != ansible_user"
    - name: check that normal virtualenv was created and files owned by normal user
      stat:
        path: "/home/normal/test_env/bin/python"
      register: virtualenv_normal_stat_result
      failed_when: "not virtualenv_normal_stat_result.stat.exists or virtualenv_normal_stat_result.stat.pw_name != 'normal'"
  handlers:
    - name: virtualenv handler created
      set_fact:
        virtualenv_notified_created: true
      changed_when: true
      notify:  # test notifying additional handlers from a handler task.
        - virtualenv foo handler
        - virtualenv bar handler
    - name: virtualenv foo handler
      set_fact:
        virtualenv_foo_notified: true
    - name: virtualenv bar handler
      set_fact:
        virtualenv_bar_notified: true
    - name: virtualenv handler no change
      set_fact:
        virtualenv_notified_no_change: true
    - name: virtualenv handler recreated
      set_fact:
        virtualenv_notified_recreated: true
    - name: virtualenv handler pre packages
      set_fact:
        virtualenv_notified_pre_packages: true
    - name: virtualenv handler pre packages downgrade
      set_fact:
        virtualenv_notified_pre_packages_downgrade: true
    - name: virtualenv handler requirements
      set_fact:
        virtualenv_notified_requirements: true
    - name: virtualenv handler post packages
      set_fact:
        virtualenv_notified_post_packages: true
    - name: virtualenv handler created with become
      set_fact:
        virtualenv_notified_created_with_become: true
    - name: virtualenv handler no change with become
      set_fact:
        virtualenv_notified_no_change_with_become: true

- name: remove virtualenv packages to test that admin will install them
  hosts: containers
  gather_facts: false
  tags: [admin]
  vars:
    # Make a copy here since role defaults are not picked up in earlier versions
    # of Ansible.
    virtualenv_default_os_packages:
      apt:
        - python-dev
        - python-virtualenv
      yum:
        - python-devel
        - python-virtualenv
  tasks:
    - name: remove virtualenv packages
      action:
        module: "{{ ansible_pkg_mgr }}"
        name: "{{ item.name | default(item, true) }}"
        state: absent
      with_items: "{{ virtualenv_default_os_packages[ansible_pkg_mgr | default(none, true)] | default([]) }}"

- name: test running as admin user with become enabled
  hosts: containers
  gather_facts: false
  tags: [admin]
  become: true
  vars:
    virtualenv_path: "~/test_env2a"
    ansible_user: admin
    ansible_pass: testpass
    ansible_become_pass: testpass
  tasks:
    - name: test creating a virtualenv as admin user and installing os packages
      include_role:
        name: cchurch.virtualenv
      vars:
        virtualenv_os_packages:
          - cowsay
        virtualenv_notify_on_updated: "virtualenv handler created by admin"
    - name: test creating a virtualenv as another user with become
      include_role:
        name: cchurch.virtualenv
      vars:
        virtualenv_user: normal
        virtualenv_path: /home/normal/test_env2b
        virtualenv_notify_on_updated: "virtualenv handler created by admin with become"
    - name: flush all notified handlers
      meta: flush_handlers
    - name: assert that appropriate handlers were notified
      assert:
        that:
          - virtualenv_notified_created_by_admin
          - virtualenv_notified_created_by_admin_with_become
    - name: check that admin virtualenv was created and files owned by admin user
      stat:
        path: "/home/admin/test_env2a/bin/python"
      register: virtualenv_admin_stat_result
      failed_when: "not virtualenv_admin_stat_result.stat.exists or virtualenv_admin_stat_result.stat.pw_name != 'admin'"
    - name: check that virtualenv was created and files owned by normal user
      stat:
        path: "/home/normal/test_env2b/bin/python"
      register: virtualenv_normal_stat_result
      failed_when: "not virtualenv_normal_stat_result.stat.exists or virtualenv_normal_stat_result.stat.pw_name != 'normal'"
  handlers:
    - name: virtualenv handler created by admin
      set_fact:
        virtualenv_notified_created_by_admin: true
    - name: virtualenv handler created by admin with become
      set_fact:
        virtualenv_notified_created_by_admin_with_become: true

- name: test running as normal user
  hosts: containers
  gather_facts: false
  tags: [normal]
  vars:
    virtualenv_path: "~/test_env3"
    ansible_user: normal
    ansible_pass: testpass
  tasks:
    - name: create virtualenv as normal user
      include_role:
        name: cchurch.virtualenv
      vars:
        virtualenv_notify_on_updated: "virtualenv handler created by normal"
    - name: flush all notified handlers
      meta: flush_handlers
    - name: assert that appropriate handlers were notified
      assert:
        that:
          - virtualenv_notified_created_by_normal
    - name: check that normal virtualenv was created and files owned by normal user
      stat:
        path: "/home/normal/test_env3/bin/python"
      register: virtualenv_normal_stat_result
      failed_when: "not virtualenv_normal_stat_result.stat.exists or virtualenv_normal_stat_result.stat.pw_name != 'normal'"
  handlers:
    - name: virtualenv handler created by normal
      set_fact:
        virtualenv_notified_created_by_normal: true

- name: test creating virtualenv with different python version
  hosts: containers
  gather_facts: false
  tags: [python3]
  vars:
    virtualenv_path: "~/test_env4"
  tasks:
    - name: create virtualenv with different python version
      include_role:
        name: cchurch.virtualenv
      vars:
        virtualenv_os_packages:
          apt: []
          yum: "{{ (ansible_distribution_major_version == '7') | ternary(['python36'], ['python34']) }}"
        virtualenv_python: python3
        virtualenv_notify_on_updated: "virtualenv handler different python"
    - name: flush all notified handlers
      meta: flush_handlers
    - name: assert that appropriate handlers were notified
      assert:
        that:
          - virtualenv_notified_different_python
    - name: check that virtualenv was created
      stat:
        path: "~/test_env4/bin/python3"
      register: virtualenv_python3_stat_result
      failed_when: "not virtualenv_python3_stat_result.stat.exists or virtualenv_python3_stat_result.stat.pw_name != ansible_user"
  handlers:
    - name: virtualenv handler different python
      set_fact:
        virtualenv_notified_different_python: true
